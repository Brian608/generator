
server:
  port: 8888
spring:
  datasource:
    dynamic:
      primary: db1 # 配置默认数据库
      datasource:
        db1: # 数据源1配置
          url: jdbc:mysql://localhost:3306/foodie-shop-dev?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
          username: root
          password: root
          driver-class-name: com.mysql.cj.jdbc.Driver
        db2: # 数据源2配置
          url: jdbc:mysql://localhost:3306/imooc_coupon_data?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
          username: root
          password: root
          driver-class-name: com.mysql.cj.jdbc.Driver
      durid:
        initial-size: 1
        max-active: 20
        min-idle: 1
        max-wait: 60000
  autoconfigure:
    exclude:  com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 去除druid配置
    # DruidDataSourceAutoConfigure会注入一个DataSourceWrapper，其会在原生的spring.datasource下找 url, username, password 等。
    # 动态数据源 URL 等配置是在 dynamic 下，因此需要排除，否则会报错。排除方式有两种，一种是上述配置文件排除，
    # 还有一种可以在项目启动类排除，在启动类上面添加标签：@SpringBootApplication(exclude = DruidDataSourceAutoConfigure.class)
mybatis-plus:
  mapper-locations: classpath*:/mapper/**
  type-aliases-package: org.feather.**.entity
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #输出查询sql